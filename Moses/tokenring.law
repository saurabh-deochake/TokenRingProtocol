
/* LGI Law which applies Token Ring Protocol
 * Authors: Saurabh Deochake (srd117)
 *          Niraj Dholakia (nd387)
 *          Romina Nayak (rn279)
 */

law(tokenring, language(javascript))

manager = "manager@new-host.home";
server = "server@new-host.home";

ring = [];
        
//================== ADOPTION OF AGENTS =================================
UPON("adopted", function() {
	//If it is agent in the token ring
    if (this.self !== manager && this.self !== server) {
	  DO("set", {
		key: "token",
		value: false
	  });
	  
	  DO("set", {
		key: "next",
		value: null
	  });
	  
	  DO("forward", {
		sender: this.self,
		receiver: manager,
		message: {       
		  action: "join",
		  member: this.self,
		}
	  });
	}
    
	if (this.self === manager) {
    // Create member list for manager
	  DO("set", {
        key: "membersList",
        value: Array()
      });
      
      DO("impose_obligation", {
		  type: "checkRingAlive",
		  time: 12
	  });
      
    if (this.self === server) {
        DO("forward", {
           sender: this.self,
           receiver: this.self,
           message: "Server started...!"
        });
    }
	  
	}
 return true;
  });
//======================END=======================================

//================== SENT EVENTS =================================
UPON("sent", function() {
	if( this.self !== manager && CS("token") === true){
    DO("forward");
	return true;
	}
	
	else if(this.self === manager){
		DO("forward");
		return true;
	}
	
});
//======================END=======================================

//================== ARRIVED EVENTS =================================
UPON("arrived", function() {
	
	if (this.self === manager && this.message.action === "join") {
            // Add new agent to ring managed by manager
            
			ring.push(this.sender);
            no_of_members = ring.length
            
			if (no_of_members == 0) {
            // Approval Message to the requesting agent    
            DO("forward", {
                sender: this.self,
                receiver: this.sender,
                message: {       
                  action: "approved",
                  next_member: ring[0],
                }
            });
			}
            // Updation Message to the last agent in the manager list to
            // update its next member
            
            if (no_of_members > 1) {
                DO("forward", {
                  sender: this.self,
                  receiver: ring[no_of_members -2],
                  message: {       
                    action: "update",
                    next_member: this.sender,
                  }
                });
                
                DO("forward", {
                  sender: this.self,
                  receiver: ring[no_of_members -1],
                  message: {       
                    action: "update",
                    next_member: ring[0],
                  }
                });
            }  
        
    } else if (this.self !== manager && this.self !== server  && 
               (this.message.action === "approved" ||
                this.message.action === "update")) {
            DO("set", {
                key: "next",
                value: this.message.next_member,
            });
    }
    
    if(this.self === manager && this.message.action === "Token_received" ){
        //when first time ring begins first time obligation_due(checkRingAlive)
		DO("repeal_obligation", {
			type: "checkRingAlive"
		});
		DO("impose_obligation",{
			type: "checkRingAlive",
			time: 12
			});
	}
	
	if(this.self === manager && this.message.action === "Token_passed"){
        //when manager is informed in obligation_due(releaseToken)// 
		DO("repeal_obligation", {
			type: "checkRingAlive"
		});
		DO("impose_obligation",{
			type: "checkRingAlive",
			time: 7
			});
	}
	
	if(this.self !== manager && this.message.action === "firsttoken"){
        //for obligation_due(checkRingAlive)//
	  DO("set", {
		  key: "token",
		  value: true
	  });
	  DO("impose_obligation",{
	  type: "releaseToken",
	  time: 5
	  });
	  DO ("forward", {
		  sender: this.self,
		  receiver: manager,
		  message: {
		    action: "Token_received",
			by: this.self
		  }
	  });
      DO("forward", {
            sender: this.self,
            receiver: server,
            message: this.self + " is accessing the server!"
        });
	} 
	
	if(this.self !== manager && this.message.action === "token"){
        //when token is passed to next in obligation_due(releaseToken)//
		DO("set", {
		  key: "token",
		  value: true
		  });
		DO("impose_obligation",{
			  type: "releaseToken",
			  time: 5
			  });
		DO("forward", {
				sender: this.self,
				receiver: manager,
				message: {
					action: "Token_passed",
					sender: this.sender,
					receiver: this.self
					  }
					  });
        DO("forward", {
            sender: this.self,
            receiver: server,
            message: this.self + " is accessing the server!"
        });
    }
	
  DO("deliver");
  return true;
});

//======================END=======================================

//================== OBLIGATION  =================================
UPON("obligation_due", function() {
	
	if (this.type === "releaseToken") {
	
	DO( "forward", {
		sender: this.self,
		receiver: CS("next"),
		message: {
			action: "token"}	
	});	
	
	DO("repeal_obligation", {
		type: "releaseToken"
	});
	
	DO( "set", {
		key: "token",
		value: false
	});
	}
	
    // Token Lost fault tolerance
    else if (this.type === "checkRingAlive"){
	DO( "forward", {
		sender: this.self,
		receiver: ring[0],
		message: {
			action: "firsttoken"
			}	
	});	
	
	}
});
//======================END=======================================

// Fault tolerance to loss of agents in the list

UPON("disconnected", function() {
  if (this.self !== manager && this.self!= server) {
    index = ring.indexOf(this.self);

            no_of_members = ring.length;
                        
			if (no_of_members == 0) {
            // Approval Message to the requesting agent    
            DO("forward", {
                sender: this.self,
                receiver: this.sender,
                message: {       
                  action: "approved",
                  next_member: ring[0],
                }
            });
			}
            // Updation Message to the last agent in the manager list to
            // update its next member
            
            if (no_of_members > 1) {
                DO("forward", {
                  sender: this.self,
                  receiver: ring[index-1],
                  message: {       
                    action: "update",
                    next_member: ring[index+1],
                  }
                });
            
            if (no_of_members > 1 && index === no_of_members -1) {
                DO("forward", {
                    sender: this.self,
                    receiver: ring[index-1],
                    message: {
                        action: "update",
                        next_member: ring[0]
                    }
                });
            }
            }
    
    
    
    // remove the dead agent from the ring
    
    ring.splice(index,1);
    
    DO("forward", {
      sender: this.self,
      receiver: manager,
      message: {
        event: "disconnected",
        controller: this.self
      }
    });
  }
  DO("quit");
  return true;
});